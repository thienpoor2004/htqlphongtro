package com.htqlptro.qlphongtro.controller;

import com.htqlptro.qlphongtro.model.OnlinePayment;
import com.htqlptro.qlphongtro.service.OnlinePaymentService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/online-payments")
@RequiredArgsConstructor
public class OnlinePaymentController {

    private final OnlinePaymentService onlinePaymentService;

    // ðŸ“Œ Táº¡o thanh toÃ¡n online
    @PostMapping
    public ResponseEntity<?> createPayment(@RequestBody Map<String, Object> request) {
        try {
            Long tenantId = Long.parseLong(request.get("tenantId").toString());
            Double amount = Double.parseDouble(request.get("amount").toString());
            String paymentMethod = request.get("paymentMethod").toString();

            OnlinePayment payment = onlinePaymentService.createPayment(tenantId, amount, paymentMethod);
            return ResponseEntity.ok(payment);
        } catch (NumberFormatException e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Dá»¯ liá»‡u khÃ´ng há»£p lá»‡."));
        } catch (RuntimeException e) {
            return ResponseEntity.status(404).body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(500).body(Map.of("error", "Lá»—i server: " + e.getMessage()));
        }
    }

    // ðŸ“Œ Láº¥y danh sÃ¡ch thanh toÃ¡n theo tenantId
    @GetMapping("/{tenantId}")
    public ResponseEntity<List<OnlinePayment>> getPaymentsByTenant(@PathVariable Long tenantId) {
        return ResponseEntity.ok(onlinePaymentService.getPaymentsByTenant(tenantId));
    }

    // ðŸ“Œ Cáº­p nháº­t tráº¡ng thÃ¡i thanh toÃ¡n
    @PutMapping("/update-status")
    public ResponseEntity<?> updatePaymentStatus(@RequestBody Map<String, String> request) {
        try {
            String transactionId = request.get("transactionId");
            String status = request.get("status");
            onlinePaymentService.updatePaymentStatus(transactionId, status);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.status(500).body(Map.of("error", "Cáº­p nháº­t tháº¥t báº¡i: " + e.getMessage()));
        }
    }

    // ðŸ“Œ Láº¥y toÃ n bá»™ thanh toÃ¡n
    @GetMapping
    public ResponseEntity<List<OnlinePayment>> getAllPayments() {
        return ResponseEntity.ok(onlinePaymentService.getAllPayments());
    }

    // ðŸ“Œ XoÃ¡ thanh toÃ¡n
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deletePayment(@PathVariable Long id) {
        try {
            onlinePaymentService.deletePayment(id);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.status(500).body(Map.of("error", "XoÃ¡ tháº¥t báº¡i: " + e.getMessage()));
        }
    }
}
